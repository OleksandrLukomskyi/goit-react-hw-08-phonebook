{"version":3,"file":"static/js/536.fee63e40.chunk.js","mappings":"iMAAaA,EAAmB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAM,EACjDC,EAAoB,SAAAH,GAAK,OAAIA,EAAMC,SAASG,SAAU,EACtDC,EAAgB,SAAAL,GAAK,OAAIA,EAAMC,SAASK,KAAM,ECD3D,EAA4B,uB,oBCA5B,EAA2B,8BAA3B,EAAqE,+B,6BC8ErE,EAtEoB,WAClB,IAAAC,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACpBI,GAA0BL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA/BE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAEhBG,GAAWC,EAAAA,EAAAA,MACXhB,GAAQiB,EAAAA,EAAAA,IAAYpB,GAEpBqB,EAAe,SAAAC,GACnB,IAAAC,EAAwBD,EAAEE,OAAlBZ,EAAIW,EAAJX,KAAMa,EAAKF,EAALE,MACL,SAATb,EAAkBC,EAAQY,GAASR,EAASQ,EAC9C,EA4BA,OACEC,EAAAA,EAAAA,MAAA,QAAMC,SA3Ba,SAAAL,GAOnB,GANAA,EAAEM,iBAEczB,EAAM0B,MACpB,SAAAC,GAAI,OAAIA,EAAKlB,OAASA,EAAKmB,QAAUD,EAAKd,QAAUA,EAAMe,MAAM,IAIhEC,MAAM,GAADC,OAAIrB,EAAI,iCADf,CAKA,IAAMsB,EAAa,CACjBC,IAAIC,EAAAA,EAAAA,MACJxB,KAAMA,EAAKmB,OACXf,MAAOA,EAAMe,QAGfb,GAASmB,EAAAA,EAAAA,IAAoBH,IAE7BjB,EAAS,IACTJ,EAAQ,IAERS,EAAEE,OAAOc,OAbT,CAcF,EAGgCC,UAAWC,EAAaC,SAAA,EACpDf,EAAAA,EAAAA,MAAA,SAAOa,UAAWC,EAAcC,SAAA,CAAC,QAE/BC,EAAAA,EAAAA,KAAA,SACEC,KAAK,OACL/B,KAAK,OACLgC,YAAY,gBACZnB,MAAOb,EACPiC,SAAUxB,EACVyB,QAAQ,2HACRC,UAAQ,QAGZrB,EAAAA,EAAAA,MAAA,SAAOa,UAAWC,EAAcC,SAAA,CAAC,SAE/BC,EAAAA,EAAAA,KAAA,SACEC,KAAK,MACL/B,KAAK,QACLgC,YAAY,YACZnB,MAAOT,EACP6B,SAAUxB,EACVyB,QAAQ,qGACRC,UAAQ,QAIZL,EAAAA,EAAAA,KAAA,UAAQC,KAAK,SAAQF,SAAC,kBAG5B,EC7EaO,EAAiB,SAAA/C,GAAK,OAAIA,EAAMgD,OAAOA,MAAO,E,UCuB3D,EAlBe,WACb,IAAM/B,GAAWC,EAAAA,EAAAA,MACX8B,GAAS7B,EAAAA,EAAAA,IAAY4B,GAM3B,OACEN,EAAAA,EAAAA,KAAA,SACEC,KAAK,OACLC,YAAY,iBACZnB,MAAOwB,EACPJ,SATuB,SAAAvB,GACzBJ,GAASgC,EAAAA,EAAAA,GAAmB5B,EAAEE,OAAOC,OACvC,GAUF,ECpBA,EAAuB,8BAAvB,EAA8D,gCCqB9D,EAjBwB,SAAH0B,GAAkB,IAAZrB,EAAIqB,EAAJrB,KACnBZ,GAAWC,EAAAA,EAAAA,MAEjB,OACEO,EAAAA,EAAAA,MAAA,MAAkBa,UAAWC,EAASC,SAAA,CACnCX,EAAKlB,KAAK,MAAIkB,EAAKd,OACpB0B,EAAAA,EAAAA,KAAA,UACEH,UAAWC,EACXG,KAAK,SACLS,QAAS,kBAAMlC,GAASmC,EAAAA,EAAAA,IAAmBvB,EAAKK,IAAI,EAACM,SACtD,aANMX,EAAKK,GAWlB,ECnBA,EAAuB,0BCGVmB,GAAwBC,E,QAAAA,IACnC,CAACvD,EAAkBgD,IACnB,SAAC7C,EAAO8C,GAON,OALE9C,GAASqD,MAAMC,QAAQtD,GACnBA,EAAM8C,QAAO,SAAAnB,GAAI,OACfA,EAAKlB,KAAK8C,cAAcC,SAASV,EAAOS,cAAc,IAExD,EAER,ICiBF,EAtBoB,WAClB,IAAMxC,GAAWC,EAAAA,EAAAA,MACXd,GAAYe,EAAAA,EAAAA,IAAYhB,GACxBwD,GAAkBxC,EAAAA,EAAAA,IAAYkC,GAMpC,OAJAO,EAAAA,EAAAA,YAAU,WACR3C,GAAS4C,EAAAA,EAAAA,MACX,GAAG,CAAC5C,KAGFQ,EAAAA,EAAAA,MAAAqC,EAAAA,SAAA,CAAAtB,SAAA,CACGpC,IAAaqC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,gBAElBC,EAAAA,EAAAA,KAAA,MAAIH,UAAWC,EAASC,SACrBmB,EAAgBI,KAAI,SAAAlC,GAAI,OACvBY,EAAAA,EAAAA,KAACuB,EAAe,CAAenC,KAAMA,GAAfA,EAAKK,GAAkB,QAKvD,ECJA,EAlBsB,WACnB,IAAM5B,GAAQa,EAAAA,EAAAA,IAAYd,GAC3B,OACCoB,EAAAA,EAAAA,MAAA,OAAKa,UAAWC,EAAcC,SAAA,CAC1BlC,IAASmC,EAAAA,EAAAA,KAAA,MAAAD,SAAKlC,KACfmC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,eACJC,EAAAA,EAAAA,KAACwB,EAAW,KACZxB,EAAAA,EAAAA,KAAA,MAAAD,SAAI,cACJC,EAAAA,EAAAA,KAACyB,EAAM,KACPzB,EAAAA,EAAAA,KAAC0B,EAAW,MAKlB,C","sources":["store/contacts/selector.js","webpack://react-homework-template/./src/components/App/App.module.css?583a","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","store/filter/selector.js","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/ContactListItem/ContactListItem.module.css?7127","components/ContactListItem/ContactListItem.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","store/filter/thunksFilter.js","components/ContactList/ContactList.jsx","pages/ContactsPage.jsx"],"sourcesContent":["export const selectorContacts = state => state.contacts.items;\nexport const selectorIsLoading = state => state.contacts.isLoading;\nexport const selectorError = state => state.contacts.error;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"App_container__cu9yO\"};","// extracted by mini-css-extract-plugin\nexport default {\"formBloc\":\"ContactForm_formBloc__ZFjvv\",\"inputBloc\":\"ContactForm_inputBloc__-MRIv\"};","import { useState } from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport css from './ContactForm.module.css';\n\nimport { nanoid } from '@reduxjs/toolkit';\nimport { addContactPostThunk } from 'store/contacts/thunksContacts';\nimport { selectorContacts } from 'store/contacts/selector';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n\n  const dispatch = useDispatch();\n  const items = useSelector(selectorContacts);\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    name === 'name' ? setName(value) : setPhone(value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const isExist = items.some(\n      item => item.name === name.trim() || item.phone === phone.trim()\n    );\n\n    if (isExist) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n\n    const newContact = {\n      id: nanoid(),\n      name: name.trim(),\n      phone: phone.trim(),\n    };\n\n    dispatch(addContactPostThunk(newContact));\n\n    setPhone('');\n    setName('');\n\n    e.target.reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={css.formBloc}>\n      <label className={css.inputBloc}>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Rosie Simpson\"\n          value={name}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          required\n        />\n      </label>\n      <label className={css.inputBloc}>\n        Numer\n        <input\n          type=\"tel\"\n          name=\"phone\"\n          placeholder=\"459-12-56\"\n          value={phone}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n          required\n        />\n      </label>\n\n      <button type=\"submit\">Add Contact</button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","export const selectorFilter = state => state.filter.filter;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectorFilter } from 'store/filter/selector';\nimport { updateFilterAction } from 'store/filter/sliceFilter';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectorFilter);\n\n  const handleFilterChange = e => {\n    dispatch(updateFilterAction(e.target.value));\n  };\n\n  return (\n    <input\n      type=\"text\"\n      placeholder=\"Search by name\"\n      value={filter}\n      onChange={handleFilterChange}\n    />\n  );\n};\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"ContactListItem_item__UAAix\",\"button\":\"ContactListItem_button__SG6H2\"};","import React from 'react';\nimport css from './ContactListItem.module.css';\nimport { useDispatch } from 'react-redux';\nimport { deleteContactThunk } from 'store/contacts/thunksContacts';\n\nconst ContactListItem = ({ item }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <li key={item.id} className={css.item}>\n      {item.name} - {item.phone}\n      <button\n        className={css.button}\n        type=\"button\"\n        onClick={() => dispatch(deleteContactThunk(item.id))}\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\n\nexport default ContactListItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\"};","import { createSelector } from '@reduxjs/toolkit';\nimport { selectorContacts } from 'store/contacts/selector';\nimport { selectorFilter } from './selector';\n\nexport const selectVisibleContacts = createSelector(\n  [selectorContacts, selectorFilter],\n  (items, filter) => {\n    const filteredItems =\n      items && Array.isArray(items)\n        ? items.filter(item =>\n            item.name.toLowerCase().includes(filter.toLowerCase())\n          )\n        : [];\n    return filteredItems;\n  }\n);\n","import React, { useEffect } from 'react';\nimport ContactListItem from 'components/ContactListItem';\nimport css from './ContactList.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { selectVisibleContacts } from 'store/filter/thunksFilter';\nimport { fetchContactsThunk } from 'store/contacts/thunksContacts';\nimport { selectorIsLoading } from 'store/contacts/selector';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectorIsLoading);\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  useEffect(() => {\n    dispatch(fetchContactsThunk());\n  }, [dispatch]);\n\n  return (\n    <>\n      {isLoading && <h2>Loading...</h2>}\n\n      <ul className={css.list}>\n        {visibleContacts.map(item => (\n          <ContactListItem key={item.id} item={item} />\n        ))}\n      </ul>\n    </>\n  );\n};\n\nexport default ContactList;\n","import { useSelector } from \"react-redux\"\nimport { selectorError } from \"store/contacts/selector\"\nimport css from '../components/App/App.module.css'\nimport ContactForm from \"components/ContactForm\";\nimport Filter from \"components/Filter\";\nimport ContactList from \"components/ContactList\";\n\n const ContactsPage = () => {\n   const error = useSelector(selectorError);\n  return (\n   <div className={css.container}>\n      {error && <h1>{error}</h1>}\n      <h1>Phonebook</h1>\n      <ContactForm/>\n      <h2>Contacts</h2>\n      <Filter/>\n      <ContactList/>\n\n   </div>\n   \n  )\n}\n\n\n\nexport default ContactsPage"],"names":["selectorContacts","state","contacts","items","selectorIsLoading","isLoading","selectorError","error","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","phone","setPhone","dispatch","useDispatch","useSelector","handleChange","e","_e$target","target","value","_jsxs","onSubmit","preventDefault","some","item","trim","alert","concat","newContact","id","nanoid","addContactPostThunk","reset","className","css","children","_jsx","type","placeholder","onChange","pattern","required","selectorFilter","filter","updateFilterAction","_ref","onClick","deleteContactThunk","selectVisibleContacts","createSelector","Array","isArray","toLowerCase","includes","visibleContacts","useEffect","fetchContactsThunk","_Fragment","map","ContactListItem","ContactForm","Filter","ContactList"],"sourceRoot":""}